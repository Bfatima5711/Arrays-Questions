class Solution {
    public int maxProfit(int[] prices) {
    //Approach 1 Brute force: TC:O(n^2) SC:(1)
    int maxProfit=0;
    for(int j=0; j<prices.length; j++){
        for(int i=j+1; i<prices.length; i++){
          maxProfit = Math.max(maxProfit,(prices[i]-prices[j]));
        }
    }

    return maxProfit;
    
    //Approach 2 Better: TC:O(n) SC:(1)

    int mini = Integer.MAX_VALUE;
    int maxProfit = 0;
    int perDayProfit = 0;
    int n = prices.length;

    for(int i=0; i<n; i++){
        if(mini>prices[i]){
            mini = prices[i];
        }

        perDayProfit = prices[i] - mini;

        if(maxProfit<perDayProfit){
            maxProfit = perDayProfit;
        }
    }

    return maxProfit;

    //Approach 3 Better: TC:O(n) SC:(1)

    int minPrice = prices[0];
    int maxProfit = 0;

    for(int i=1; i<prices.length; i++){
        minPrice = Math.min(minPrice,prices[i]);
        maxProfit = Math.max(maxProfit,prices[i]-minPrice);
    }

    return maxProfit;
    }
}