class Solution {
    public void nextPermutation(int[] nums) {
        //Approach 1 brute force by using recursion we can find all the permuattion of given number
        //and after that using leaner search we can get the next permutation

        //Approach 2 Better: TC: O(n) SC: O(1)

        int n = nums.length;

        int idx = -1;

        for(int i=n-2; i>=0; i--){
            if(nums[i]<nums[i+1]){
                idx = i;
                break;
            }
        }

        if(idx==-1){
            // to reverse a array in this case we are handling the last permutation case 
            //so by reversing it we are printing the first occurance of permuations
            int temp[] = new int[n];
            int j = n-1;
            for(int i=0; i<n; i++){
                temp[j--] = nums[i];
            }
           // nums = temp;
           for(int i=0; i<n; i++){
               nums[i] = temp[i];
           }
            return;
        }

        for(int i=n-1; i>idx; i--){
            if(nums[i]>nums[idx]){
                int temp = nums[i];
                nums[i] = nums[idx];
                nums[idx] = temp;
                break;
            }
        }

        ArrayList<Integer> list = new ArrayList<>();
        for(int i=idx+1; i<n; i++){
            list.add(nums[i]);
        } 

        Collections.reverse(list); // reverse method takes O(n) TC
        int k =0;
        for(int i=idx+1; i<n; i++){
            nums[i] = list.get(k++);
        }
    }
}