

class Solution {
    public int maximumProduct(int[] nums) {
        //TC:O(nlogn) SC:O(n)
        // In a sorted array, the maximum product will be either the last three largest 
        // elements or the first two (negative elements) multiplied by the last (largest) 
        // element.
        //The next step involves calculating two potential maximum products:

        // "case1" represents the product of the two smallest numbers (nums[0] and nums[1]) in the 
        // sorted array, multiplied by the largest number (nums[nums.length-1]). You may think why
        // do I use the first two number. Just think, if there are negative numbers and if I multiply
        // two negative numbers then the resultant will be positive.

        // "case2" represents the product of the three largest numbers in the sorted array 
        // (nums[nums.length-1], nums[nums.length-2], and nums[nums.length-3]).
        Arrays.sort(nums);
        
        if(nums.length<=1){
            return 0;
        }else{
        int res = nums[0]*nums[1]*nums[nums.length-1];
        int res1= nums[nums.length-1]*nums[nums.length-2]*nums[nums.length-3];
        int result = Integer.max(res,res1);
        return result;
        }
    }
}
