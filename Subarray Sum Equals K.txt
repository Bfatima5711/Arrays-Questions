 public int subarraySum(int[] nums, int k) {
        //Brute force : Approach 1 TC: O(n2) SC:O(1)
        int sum = 0;
        int n = nums.length;
        int count = 0;
        for(int i=0; i<n; i++){
            sum = 0;
            for(int j=i; j<n; j++){
                sum += nums[j];
                if(sum==k){
                    count++;
                  }
            }
        }
        return count;
        

        //Optimal Approach 2 TC: O(nlogn) SC:O(n)
        Map<Integer,Integer> map = new HashMap<>();
        int sum = 0;
        int cnt = 0;
        int n = nums.length;
        map.put(0,1);
        for(int i=0; i<n; i++){
            sum += nums[i];

            int rem = sum - k;

            cnt += map.getOrDefault(rem,0);

            map.put(sum, map.getOrDefault(sum,0)+1);
        }

        return cnt;
    }


