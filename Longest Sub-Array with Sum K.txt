public static int lenOfLongSubarr (int A[], int n, int k) {
        //Complete the function
        //Brute force: Approach 1 , TC : O(n3) SC: O(1)
        int sum = 0;
        int maxLen = 0;
        for(int i=0; i<n; i++){
            for(int j=i; j<n; j++){
                sum = 0;
                for(int x = i; x<=j; x++){
                    sum += A[x];
                }
                if(sum==k){
                        maxLen = Math.max(maxLen,j-i+1);
                  }
            }
        }
        return maxLen;
        
        
        //Brute force: Approach 2 , TC : O(n2) SC: O(1)
        int sum = 0;
        int maxLen = 0;
        for(int i=0; i<n; i++){
            sum = 0;
            for(int j=i; j<n; j++){
                sum += A[j];
                if(sum==k){
                    maxLen = Math.max(maxLen,j-i+1);
                }
            }
        }
        return maxLen;
        
        //Better: Approach 3 , TC : O(nlogn) SC: O(n)
        //If Array contains Negative and Positive numbers this is the optimal solution 
        Map<Integer,Integer> map = new HashMap<>();
        int sum = 0;
        int maxLen = 0;
        for(int i=0; i<n; i++){
            sum += A[i];
            
            if(sum == k){
                maxLen = Math.max(maxLen,i+1);
            }
            
            int rem = sum - k;
            
            if(map.containsKey(rem)){
                int len = i - map.get(rem);
                maxLen = Math.max(maxLen,len);
            }
            
            if(!map.containsKey(sum)){
                map.put(sum,i);
            }
            
        }
        return maxLen;
        
        //optimal: Approach 4 , TC : O(2n)~=O(n), SC: O(1)
        //If Array contains (numbers>=0) All Positive numbers 
        //this is the optimal solution
        
        int maxLen = 0;
        int sum = A[0];
        int left = 0, right = 0;
        
        while(right<n){
            
            while(left<=right && sum>k){
                sum -= A[left];
                left++;
            }
            
            if(sum==k){
                maxLen = Math.max(maxLen, right - left + 1);
            }
            right++;
            if(right<n){
                sum += A[right];
            }
        }
        return maxLen;
    }