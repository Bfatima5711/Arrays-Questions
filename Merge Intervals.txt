class Solution {
    public int[][] merge(int[][] arr) {
        //APproach 1: TC:O(nlogn)+O(2n) SC:O(n)
        int n = arr.length;

        Arrays.sort(arr, new Comparator<int[]>(){//O(nlogn) time for sorting
            public int compare(int[] a, int[] b){
                return a[0]-b[0];
            }
        });

       List<List<Integer>> ans = new ArrayList<>();//O(n) space for storing element

        for(int i=0; i<n; i++){//(near abount O(2n) time to check the elements)
            int start = arr[i][0];
            int end = arr[i][1];

            if(!ans.isEmpty() && end<=ans.get(ans.size()-1).get(1)){
                continue;
            }

            for(int j=i+1; j<n; i++){
                if(arr[j][0]<=end){
                    end = Math.max(end,arr[j][1]);
                }else{
                    break;
                }
            }

            ans.add(Arrays.asList(start,end));
        }

        int[][] res = new int[ans.size()][2];

        for(int i=0; i<ans.size(); i++){
            res[i][0] = ans.get(i).get(0);
            res[i][1] = ans.get(i).get(1);
        }

        return res;

        //Approach 2: TC:O(nlogn) SC:O(n)

        int n = arr.length;

        Arrays.sort(arr, new Comparator<int[]>(){//O(nlogn) time for sorting
            public int compare(int[] a, int[] b){
                return a[0]-b[0];
            }
        });

       List<List<Integer>> ans = new ArrayList<>();//O(n) space for storing elemets


        for(int i=0; i<n; i++){
            if(ans.isEmpty() || arr[i][0]>ans.get(ans.size()-1).get(1)){
                ans.add(Arrays.asList(arr[i][0],arr[i][1]));
            }else{
                ans.get(ans.size()-1).set(1, Math.max(ans.get(ans.size()-1).get(1), arr[i][1]));
            }
        }

         int[][] res = new int[ans.size()][2];

        for(int i=0; i<ans.size(); i++){
            res[i][0] = ans.get(i).get(0);
            res[i][1] = ans.get(i).get(1);
        }

        return res;


    }
}