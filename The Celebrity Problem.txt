class Solution
{ 
    public boolean knows(int[][] M, int a, int b, int n){
        if(M[a][b]==1){
            return true;
        }else{
            return false;
        }
    }
    int celebrity(int M[][], int n)
    {
    	//Approach 1: Brute Force TC:O(n^2) SC:O(1)
    	int cnt1 = 0, cnt2 = 0;
    	
    	for(int i=0; i<n; i++){
    	    cnt1=0;
    	    cnt2=0;
    	  //celebrity knows no body means the i'th row contains all 0
    	  //and all knows celebrity means i==j means the same col eg i==1 so call 
    	  // j==1 all the ements in col is one all othere peaple knows celebrity
    	  //here i==j means diagonal elements are zero bcs 1 knows 1 that is self emnt
    	   for(int r=0; r<n; r++){
    	       if(M[i][r]==0){
    	           cnt1 ++;
    	       }
    	   }
    	   for(int c=0; c<n; c++){
    	       if(i==c){
    	           cnt2++;
    	           continue;
    	       }
    	       if(M[c][i]==1){
    	           cnt2++;
    	       }
    	   }
    	   if(cnt1==n && cnt2==n){
    	       return i;
    	   }
    	}
    	
    	return -1;
    	
    	//Approach 2: Better TC:O(n) SC:O(1)
    	
    	Stack<Integer> st = new Stack<>();
    	
    	for(int i=0; i<n; i++){
    	    st.push(i);
    	}
    	
    	while(st.size()>1){
    	    int a = st.peek();
    	    st.pop();
    	    int b = st.peek();
    	    st.pop();
    	    
    	    if(knows(M,a,b,n)){
    	        st.push(b);
    	    }else{
    	        st.push(a);
    	    }
    	}
    	
    	int cnt1=0, cnt2=0;
    	int ans = st.pop();
    	
    	for(int i=0; i<n; i++){
    	    // to cehck row
    	    if(M[ans][i]==0){
    	        cnt1++;
    	    }
    	    // to check col
    	    if(i==ans){
    	        cnt2++;
    	        continue;
    	    }
    	    if(M[i][ans]==1){
    	        cnt2++;
    	    }
    	}
    	
    	if(cnt1==n && cnt2==n){
    	    return ans;
    	}
    	return -1;
    }
}