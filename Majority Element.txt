class Solution {
    public int majorityElement(int[] nums) {
        //Approach 2 Brute forcer: TC: O(n^2) SC:O(1)
        int n = nums.length;
        int m = n/2;
        int cnt = 0;
        for(int i=0; i<n; i++){
            cnt = 0;
            for(int j=0; j<n; j++){
                if(nums[i]==nums[j]){
                    cnt++;
                }
            }

            if(cnt>m){
                return nums[i];
            }
        }

        // return 0;
        //Approach 2 Better: TC: O(nlogn) SC:O(n)
        //TC: O(N*logN) + O(N), where N = size of the given array.
        //Reason: We are using a map data structure. Insertion in the map takes logN time.
        // And we are doing it for N elements. So, it results in the first term O(N*logN). 
        //The second O(N) is for checking which element occurs more than floor(N/2) times. 
        //SC: O(N) as we are using a map data structure.
        
        int n = nums.length/2;

        HashMap<Integer,Integer> map = new HashMap<>();

        for(int i=0; i<nums.length; i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1); 
        }

        for(int key: map.keySet()){
            if(map.get(key)>n){
                return key;
            }
        }

        return 0;

         //Approach 2 Better: TC: O(nlogn) SC:O(1)

         int n = nums.length;
         Arrays.sort(nums);
         return nums[n/2];
         
        //Approach 4 Better: TC: O(n) SC:O(1)

        int cnt = 0;
        int element = 0;
        for(int i=0; i<nums.length; i++){
            if(cnt==0){
                cnt=1;
                element = nums[i];
            }else if(element==nums[i]){
                cnt++;
            }else{
                cnt--;
            }
        }

        int cnt2 = 0;
        for(int i=0; i<nums.length; i++){
            if(element==nums[i]){
                cnt2++;
            }
        }

        if(cnt2>nums.length/2){
            return element;
        }

        return 0;
    }
}