class Solution {
    //Approach 1: TC: O(n^2) SC:O(1)

    public boolean linerSearch(int[] arr, int x){
        for(int i=0; i<arr.length; i++){
            if(arr[i]==x){
                return true;
            }
        }
        return false;
    }
     public int longestConsecutive(int[] nums) {
        
        int n = nums.length;
        int longest=1;
        if(n<=1){
            return n;
        }

        for(int i=0; i<n; i++){
            int x = nums[i];
            int cnt = 1;

            while(linerSearch(nums,x+1)){
                x = x+1;
                cnt++;
            }

            longest = Math.max(longest, cnt);
        }

        return longest;

    //Approach 2: TC: O(nlogn)+O(n) SC:O(1)

    int lastSmallest=Integer.MIN_VALUE;
    int n = nums.length;
    int cnt = 1;
    int longest = 1;
    Arrays.sort(nums);

    if(n<=1){
        return n;
    }

    for(int i=0; i<n; i++){
        if(nums[i]-1 == lastSmallest){
            cnt++;
            lastSmallest=nums[i];
        }else if(nums[i]!=lastSmallest){
            cnt=1;
            lastSmallest = nums[i];
        }

        longest = Math.max(cnt,longest);
    }
    return longest;

    //Approach 3: TC: O(3n) SC:O(n)
    HashSet<Integer> set = new HashSet<>();
    int n = nums.length;
    int longest = 1;
    if(n==0){
        return 0;
    }

    for(int i=0; i<n; i++){
        set.add(nums[i]);
    }

    for(int it: set){
        if(!set.contains(it-1)){
            int cnt=1;
            int x = it;
            while(set.contains(x+1)){
                cnt++;
                x=x+1;
            }

            longest = Math.max(longest, cnt);
        }
    }

    return longest;

}

}