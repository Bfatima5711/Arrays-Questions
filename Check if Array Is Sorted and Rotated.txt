class Solution {
    public boolean check(int[] nums) {
       // Approach 1: Brute force TC: O(n2) SC: O(n)
        int x=0;
       while(x<nums.length){
           int temp[] = new int[nums.length];
            int val = nums[0];
            int idx=0;
            for(int j=1; j<nums.length; j++){
                temp[idx++] = nums[j];
            }
            temp[idx] = val;

            for(int i=1; i<nums.length; i++){
                if(temp[i-1]>temp[i]){
                    x++;
                    break;
                }else{
                    if(i+1==nums.length){
                        return true;
                    }
                }
            }

            for(int i=0; i<nums.length; i++){
                nums[i] = temp[i];
            }

        }
        return false;

    //Approach 2:better TC: O(n) SC: O(1)

    int irregularities = 0;
    int len = nums.length;

    for(int i=0; i<len; i++){
        if(nums[i]>nums[(i+1)%len]){
            irregularities += 1;
        }
    }

    return irregularities>1?false:true;
    }
}