class Solution {

    public void merge(int[] arr, int low, int mid, int high){
        ArrayList<Integer> temp = new ArrayList<>();
        int left = low;
        int right = mid+1;

        while(left<=mid && right<=high){
            if(arr[left]<=arr[right]){
                temp.add(arr[left++]);
            }else{
                temp.add(arr[right++]);
            }
        }

        while(left<=mid){
            temp.add(arr[left++]);
        }

        while(right<=high){
            temp.add(arr[right++]);
        }

        for(int i=low; i<=high; i++){
            arr[i] = temp.get(i-low);
        }
    }

    public int countPair(int[] arr, int low, int mid, int high){
        int cnt = 0;
        int right = mid+1;
        for(int i=low; i<=mid; i++){
            while(right<=high && arr[i]>((long)2*arr[right])){
                right++;
            }
            cnt += (right - (mid+1));
        }
        return cnt;
    }
    public int mergeSort(int[] arr, int low, int high){
        int cnt = 0;
        if(low>=high){
            return cnt;
        }
        int mid = (low+high)/2;
        cnt += mergeSort(arr, low, mid);
        cnt += mergeSort(arr, mid+1, high);
        cnt += countPair(arr, low, mid, high);
        merge(arr, low, mid, high);
        return cnt;
    }
    public int reversePairs(int[] nums) {

        //Approach 1: Brute force TC:O(n^2) SC(1)
        int n = nums.length;
        int cnt=0;

        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(nums[i]>((long)2*nums[j])){
                    cnt++;
                }
            }
        }

        return cnt;

        //Approach 2: Optimal TC:O(2nlogn) SC(n)
        int n = nums.length;
        return mergeSort(nums, 0, n-1);
    }
}